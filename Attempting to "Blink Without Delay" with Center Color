#include "FastLED.h"

// fast led constants
#define DATA_PIN    6       // change to your data pin
#define COLOR_ORDER GRB      // if colors are mismatched; change this
#define NUM_LEDS 7   // change to the number of LEDs in your strip

// change WS2812B to match your type of LED, if different
// list of supported types is here:
// https://github.com/FastLED/FastLED/wiki/Overview
#define LED_TYPE    WS2812B


// constants won't change. Used here to set a pin number:
//const int ledPin =  LED_BUILTIN;// the number of the LED pin

// Variables will change:
//int ledState = LOW;             // ledState used to set the LED

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated

// constants won't change:
const long interval = 1000;           // interval at which to blink (milliseconds)

CRGB leds[NUM_LEDS];

void setup() {
  FastLED.show();
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setBrightness(50);
  FastLED.clear();
  leds[0] = CRGB::Blue;
}

void loop() {
  // here is where you'd put code that needs to be running all the time.

  // check to see if it's time to blink the LED; that is, if the difference
  // between the current time and last time you blinked the LED is bigger than
  // the interval at which you want to blink the LED.
  unsigned long currentMillis = millis();

  if ((currentMillis - previousMillis >= interval) && (leds[0] = CRGB::Blue)) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;
      leds[0] = CRGB::Green;
    } 
    FastLED.show();

  if ((currentMillis - previousMillis >= interval) && (leds[0] = CRGB::Green)) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;
      leds[0] = CRGB::Blue;
    }
    FastLED.show();

    // set the LED with the ledState of the variable:
  }
